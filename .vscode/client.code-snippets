{
	"Is Object Cyclic?": {
		"prefix": ["isCyclic"],
		"body": ["Object.isCyclic = function($0){",
			"\tconst keys = [];",
			"\tconst stack = [];",
			"\tconst stackSet = new Set();",
			"\tlet detected = false;",
		  	"\n",
			"\tfunction detect(object, key){",
				"\t\tif (!(object instanceof Object)) return;",
				"\n",
				"\t\tif (stackSet.has(object)) {",
					"\t\t\tconst oldindex = stack.indexOf(object);",
					"\t\t\tconst l1 = `\\${keys.join(\".\")\\}.\\${key\\}`;",
					"\t\t\tconst l2 = keys.slice(0, oldindex + 1).join(\".\");",
					"\t\t\tconsole.log(`CIRCULAR: \\${l1\\} = \\${l2\\} = \\${object\\}`);",
					"\t\t\tconsole.log(object);",
					"\t\t\tdetected = true;",
					"\t\t\treturn;",
				"\t\t}",
				"\n",
				"\t\tkeys.push(key);",
				"\t\tstack.push(object);",
				"\t\tstackSet.add(object);",
				"\t\tObject.keys(object).forEach(function(k){",
					"\t\t\tif (k && Object.prototype.hasOwnProperty.call(object, k)) {",
						"\t\t\t\tdetect(object[k], k);",
					"\t\t\t}",
				"\t\t});",
				"\n",
				"\t\tkeys.pop();",
				"\t\tstack.pop();",
				"\t\tstackSet.delete(object);",
			"\t}",
			"\n",
			"\tdetect(obj, \"obj\");",
			"\treturn detected;",
		"};"
	],
	"description": "Prints stacktrace if object is cyclic."
	}
}
